using SphinxPortManaged.CPlusPlus;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SphinxPortManaged.Structs
{
    public class ps_lattice_t
    {
        public int refcount;      /**< Reference count. */

        public Pointer<logmath_t> lmath;    /**< Log-math object. */
        public ps_search_t search; /**< Search (if generated by search). */
        public Pointer<dict_t> dict;    /**< Dictionary for this DAG. */
        public int silence;       /**< Silence word ID. */
        public int frate;         /**< Frame rate. */

        public Pointer<ps_latnode_t> nodes;  /**< List of all nodes. */
        public Pointer<ps_latnode_t> start;  /**< Starting node. */
        public Pointer<ps_latnode_t> end;    /**< Ending node. */

        public int n_frames;    /**< Number of frames for this utterance. */
        public int n_nodes;     /**< Number of nodes in this lattice. */
        public int final_node_ascr; /**< Acoustic score of implicit link exiting final node. */
        public int norm;        /**< Normalizer for posterior probabilities. */
        public Pointer<byte> hyp_str;     /**< Current hypothesis string. */

        public Pointer<listelem_alloc_t> latnode_alloc;     /**< Node allocator for this DAG. */
        public Pointer<listelem_alloc_t> latlink_alloc;     /**< Link allocator for this DAG. */
        public Pointer<listelem_alloc_t> latlink_list_alloc; /**< List element allocator for this DAG. */

        /* This will probably be replaced with a heap. */
        public Pointer<latlink_list_t> q_head; /**< Queue of links for traversal. */
        public Pointer<latlink_list_t> q_tail; /**< Queue of links for traversal. */
    }
}
